<?xml version="1.0" encoding="ISO-8859-1"?>
<!--

    Licensed to Jasig under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Jasig licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License.  You may obtain a
    copy of the License at the following location:

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<web-app xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
         version="2.4">
  <display-name>Central Authentication System (CAS) ${project.version}</display-name>

  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
      /WEB-INF/spring-configuration/*.xml,
      classpath:spring-configuration/*.xml
      /WEB-INF/deployerConfigContext.xml,
    </param-value>
  </context-param>

  <filter>
    <filter-name>multiPartResolver</filter-name>
    <filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>multiPartResolver</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter>
    <filter-name>CAS Client Info Logging Filter</filter-name>
    <filter-class>org.jasig.inspektr.common.web.ClientInfoThreadLocalFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>CAS Client Info Logging Filter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter>
    <filter-name>CORS</filter-name>
    <filter-class>com.dr.cas.controller.CORSFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>CORS</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter>
    <filter-name>springSecurityFilterChain</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>/status</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>/statistics</url-pattern>
  </filter-mapping>

  <filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!--
    - Loads the CAS ApplicationContext.
    - The deployer choice here is how to handle Throwables thrown by Spring's
    - ContextLoaderListener.  The Spring ContextLoaderListener will throw an exception when the
    - application context cannot be loaded, say because the bean XML files are not valid XML or do not
    - refer to real classes and properties or because a bean configured via Spring throws an exception
    - at construction, property setting, or on an afterPropertiesSet() lifecycle method.
    -
    - If you'd like these errors to be fatal and prevent the CAS servlet context from loading at all,
    - use org.springframework.web.context.ContextLoaderListener.
    -
    - If you'd like these errors to result in all requests for CAS getting a "CAS is Unavailable" response,
    - use org.jasig.cas.web.init.SafeContextLoaderListener
  -->
   <!--
      - Loads the CAS ApplicationContext.
    -->
    <listener>
        <listener-class>
            org.springframework.web.context.ContextLoaderListener
        </listener-class>
    </listener>
    <listener>
        <listener-class>
            org.jasig.cas.CasEnvironmentContextListener
        </listener-class>
    </listener>
	
   <servlet>
	    <servlet-name>restlet</servlet-name>
	    <servlet-class>org.restlet.ext.spring.RestletFrameworkServlet</servlet-class>
	    <load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
	    <servlet-name>restlet</servlet-name>
	    <url-pattern>/v1/*</url-pattern>
	</servlet-mapping>

	<servlet>
        <servlet-name>metrics-health</servlet-name>
        <servlet-class>com.codahale.metrics.servlets.HealthCheckServlet</servlet-class>
    </servlet>

    <servlet>
        <servlet-name>metrics</servlet-name>
        <servlet-class>com.codahale.metrics.servlets.MetricsServlet</servlet-class>
    </servlet>

    <servlet>
        <servlet-name>metrics-ping</servlet-name>
        <servlet-class>com.codahale.metrics.servlets.PingServlet</servlet-class>
    </servlet>

    <servlet>
        <servlet-name>metrics-threads</servlet-name>
        <servlet-class>com.codahale.metrics.servlets.ThreadDumpServlet</servlet-class>
    </servlet>
    
     <servlet-mapping>
        <servlet-name>metrics-ping</servlet-name>
        <url-pattern>/statistics/ping</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>metrics</servlet-name>
        <url-pattern>/statistics/metrics</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>metrics-threads</servlet-name>
        <url-pattern>/statistics/threads</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>metrics-health</servlet-name>
        <url-pattern>/statistics/healthcheck</url-pattern>
    </servlet-mapping>
<!--
      - This is the Spring dispatcher servlet which delegates all requests to the
      - Spring WebMVC controllers as configured in cas-servlet.xml.
      - This configuration also provides a plugin mechanism which enables un-intrusive contributions to the DispatcherServlet
      - child application context (via local Maven or Gradle war overlays for example)
      - and thus an ability to override beans defined in cas-servlet.xml by means of including additional
      - Spring XML config files with a naming convention pattern of /WEB-INF/cas-servlet-*.xml
    -->
    <servlet>
        <servlet-name>cas</servlet-name>
        <servlet-class>
            org.springframework.web.servlet.DispatcherServlet
        </servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/cas-servlet.xml, /WEB-INF/cas-servlet-*.xml</param-value>
        </init-param>
        <init-param>
            <param-name>publishContext</param-name>
            <param-value>false</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    
  <servlet-mapping>
    <servlet-name>cas</servlet-name>
    <url-pattern>/login</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>cas</servlet-name>
    <url-pattern>/account/login</url-pattern>
  </servlet-mapping>


  <servlet-mapping>
    <servlet-name>cas</servlet-name>
    <url-pattern>/logout</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>cas</servlet-name>
    <url-pattern>/validate</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>cas</servlet-name>
    <url-pattern>/serviceValidate</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>cas</servlet-name>
    <url-pattern>/p3/serviceValidate</url-pattern>
  </servlet-mapping>
  
  <servlet-mapping>
    <servlet-name>cas</servlet-name>
    <url-pattern>/proxy</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>cas</servlet-name>
    <url-pattern>/proxyValidate</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>cas</servlet-name>
    <url-pattern>/p3/proxyValidate</url-pattern>
  </servlet-mapping>
  
  <servlet-mapping>
    <servlet-name>cas</servlet-name>
    <url-pattern>/CentralAuthenticationService</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>cas</servlet-name>
    <url-pattern>/status</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>cas</servlet-name>
    <url-pattern>/statistics</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>cas</servlet-name>
    <url-pattern>/authorizationFailure.html</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>cas</servlet-name>
    <url-pattern>/users/login</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>cas</servlet-name>
    <url-pattern>/users/login/token</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>cas</servlet-name>
    <url-pattern>/users/loginsmart</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>cas</servlet-name>
    <url-pattern>/borrower-static/wallet/v3/login.html</url-pattern>
  </servlet-mapping>
  
  <!-- for query service ticket -->
 <servlet-mapping>
    <servlet-name>cas</servlet-name>
    <url-pattern>/serviceTicket/query</url-pattern>
  </servlet-mapping>
     
  <servlet>
    <servlet-name>Kaptcha</servlet-name>
    <servlet-class>com.google.code.kaptcha.servlet.CaptchaServlet</servlet-class>
    <init-param>
      <param-name>cap.border</param-name>
      <param-value>no</param-value>
    </init-param>
    <init-param>
      <param-name>cap.char.arr</param-name>
      <param-value>0,2,3,4,5,6,8,9</param-value>
    </init-param>
    <init-param>
      <param-name>cap.background.c.to</param-name>
      <param-value>white</param-value>
    </init-param>
    <init-param>
      <param-name>cap.background.c.from</param-name>
      <param-value>white</param-value>
    </init-param>
    <init-param>
      <param-name>cap.obscurificator</param-name>
      <param-value>com.google.code.kaptcha.impl.WaterRiple</param-value>
    </init-param>
    <init-param>
      <param-name>cap.noise.c</param-name>
      <param-value>255,96,0</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>Kaptcha</servlet-name>
    <url-pattern>/images/captcha.jpg</url-pattern>
  </servlet-mapping>
  <!-- END captcha servlet -->

  <session-config>
    <!-- Default to 5 minute session timeouts -->
    <session-timeout>5</session-timeout>
  </session-config>

  <error-page>
    <error-code>401</error-code>
    <location>/authorizationFailure.html</location>
  </error-page>

  <error-page>
    <error-code>403</error-code>
    <location>/authorizationFailure.html</location>
  </error-page>

  <error-page>
    <error-code>404</error-code>
    <location>/</location>
  </error-page>

  <error-page>
    <error-code>500</error-code>
    <location>/WEB-INF/view/jsp/errors.jsp</location>
  </error-page>

  <error-page>
    <error-code>501</error-code>
    <location>/WEB-INF/view/jsp/errors.jsp</location>
  </error-page>

  <error-page>
    <error-code>503</error-code>
    <location>/WEB-INF/view/jsp/errors.jsp</location>
  </error-page>

  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
</web-app>
